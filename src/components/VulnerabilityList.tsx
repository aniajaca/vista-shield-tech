import { motion } from 'framer-motion';
import { AlertCircle, FileCode, Clock } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';

interface Vulnerability {
  id: string;
  title: string;
  severity: 'critical' | 'high' | 'medium' | 'low' | 'info';
  cweId: string;
  cvssScore: number;
  file: string;
  line: number;
  finding?: any; // Add optional finding property for CVSS data
}

export const VulnerabilityList = ({ findings = [] }) => {
  // If findings are provided from backend, use those instead of mock data
  const vulnerabilities = findings.length > 0 ? findings.map((finding, index) => ({
    id: finding.id || `vuln-${index + 1}`,
    title: finding.title || finding.name || finding.check_id || finding.message || "Security Vulnerability",
    severity: finding.severity || finding.adjustedSeverity || 'medium',
    cweId: finding.cwe?.id ? (String(finding.cwe.id).startsWith('CWE-') ? finding.cwe.id : `CWE-${finding.cwe.id}`) : 'N/A',
    cvssScore: finding.adjustedScore || finding.cvss?.adjustedScore || finding.cvss?.baseScore || 0,
    file: finding.file || finding.location?.file || finding.location?.path || "Code scan",
    line: finding.startLine || finding.line || finding.location?.line || finding.location?.row || 0,
    finding: finding, // Keep reference to original finding for CVSS display
  })) : [
    // Default mock data if no findings provided
    {
      id: 'vuln-001',
      title: 'SQL Injection',
      severity: 'critical',
      cweId: 'CWE-89',
      cvssScore: 9.6,
      file: 'auth.js',
      line: 145,
      finding: null, // No finding data for mock data
    },
    {
      id: 'vuln-002',
      title: 'Cross-Site Scripting (XSS)',
      severity: 'high',
      cweId: 'CWE-79',
      cvssScore: 7.2,
      file: 'user.controller.js',
      line: 89,
      finding: null,
    },
    {
      id: 'vuln-003',
      title: 'Insecure Direct Object Reference',
      severity: 'critical',
      cweId: 'CWE-639',
      cvssScore: 8.8,
      file: 'api.routes.js',
      line: 203,
      finding: null,
    },
  ];

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'severity-critical';
      case 'high': return 'severity-high';
      case 'medium': return 'severity-medium';
      case 'low': return 'severity-low';
      default: return 'severity-info';
    }
  };

  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
      },
    },
  };

  const item = {
    hidden: { opacity: 0, x: -20 },
    show: { opacity: 1, x: 0 },
  };

  return (
    <motion.div
      variants={container}
      initial="hidden"
      animate="show"
      className="space-y-4"
    >
      {vulnerabilities.map((vuln) => {
        const finding = vuln.finding || {};
        return (
        <motion.div
          key={vuln.id}
          variants={item}
          className="p-4 rounded-lg border border-border/50 bg-card/30 hover:bg-card/50 transition-all duration-200 hover-lift"
        >
          <div className="flex items-start justify-between mb-2">
            <div className="flex items-center space-x-2">
              <AlertCircle className="h-4 w-4 text-destructive" />
              <h3 className="font-medium text-sm truncate">{vuln.title}</h3>
            </div>
            <Badge className={`text-xs px-2 py-1 ${getSeverityColor(vuln.severity)}`}>
              {vuln.severity.toUpperCase()}
            </Badge>
          </div>
          
            <div className="flex items-center space-x-4 text-xs text-muted-foreground mb-3">
            <div className="flex items-center space-x-1">
              <FileCode className="h-3 w-3" />
              <span>{vuln.file}{vuln.line > 0 ? `:${vuln.line}` : ''}</span>
            </div>
            <Badge variant="outline" className="text-xs">
              {vuln.cweId}
            </Badge>
            <div className="flex items-center space-x-1">
              <Clock className="h-3 w-3" />
              <span>
                Base CVSS: {finding.cvssBase || finding.cvss?.baseScore || 'N/A'} | 
                Adjusted: {finding.adjustedScore || finding.cvss?.adjustedScore || vuln.cvssScore}
              </span>
            </div>
          </div>
          
          <div className="flex justify-between items-center">
            <Button 
              variant="outline" 
              size="sm" 
              className="text-xs hover:bg-primary/10 hover:border-primary/30"
            >
              View Details
            </Button>
            <Button 
              variant="default" 
              size="sm" 
              className="text-xs glow-primary"
            >
              Fix Now
            </Button>
          </div>
        </motion.div>
        );
      })}
      
      <div className="text-center pt-4">
        <Button 
          variant="ghost" 
          className="w-full text-accent hover:bg-accent/10"
        >
          View All {vulnerabilities.length + 44} Vulnerabilities
        </Button>
      </div>
    </motion.div>
  );
};